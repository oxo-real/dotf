#! /usr/bin/env sh

## get data

## with pipewire and wireplumber
sink_vol=$(wpctl get-volume @DEFAULT_SINK@ | grep --only-matching '[[:digit:]]' | tr -d '\n')
sink_mute=$(wpctl get-volume @DEFAULT_SINK@ | grep -i 'mute')

mic_vol=$(wpctl get-volume @DEFAULT_SOURCE@ | grep --only-matching '[[:digit:]]' | tr -d '\n')
mic_mute=$(wpctl get-volume @DEFAULT_SOURCE@ | grep -i 'mute')

## onboard headphones jack tpx1c
headphones_jack=$(cat /proc/asound/card1/codec\#0 | grep '0x31')

## with alsamixer and pulseaudio
#volume=$(amixer -D pulse sget Master | grep 'Left: ' | cut -d ' ' -f 7 | tr -d -c "[:digit:]")
#amixer -D pulse sget Master | grep 'Left: ' | awk -F '[][]' '{printf "%s",$2}'
#mute=$(amixer get Master | grep off)

#TODO DEV headphones
## https://www.baeldung.com/linux/detect-headphone-connection-disconnection

## volume

## remove first zero
sink_vol_calc=$(printf "$sink_vol" | sed 's/^0//')

## sink_vol for presentation
case $sink_vol in

    100)
	sink_vol='FF'
	;;

    *)
	sink_vol=$sink_vol_calc
	;;

esac

## status
sink_status='<'
[ -n "$headphones_jack" ] && sink_status='H'
[ -n "$sink_mute" ] && sink_status='X'

## microphone
#[ -z "$mic_mute" ] && mic_warning='M!'

## color
var=$sink_vol_calc

## minimum, maximum value and number of threshold (colors)
## number of colors = 2 + no_thr
min=20
max=90
no_thr=5

## interval size
int=$(echo "scale=0; ($max - $min) / $no_thr" | bc -l)


## full text
printf "%s%s\n" "$sink_vol" "$sink_status"
#printf "%s%s${RED}%s${NOC}\n" "$sink_vol" "$sink_status" "$mic_warning"

## short text
echo  ## none

## text, background and border
case $mic_mute in

    '')
	## text
	(( $var > $(( min + 5 * int )) )) && echo "#ff6c60"  ## red
	(( $var > $(( min + 4 * int )) && $var <= $(( min + 5 * int )) )) && echo "#ffffb6"  ## yellow
	(( $var > $(( min + 3 * int )) && $var <= $(( min + 4 * int )) )) && echo "#ffbf00"  ## amber
	(( $var > $(( min + 2 * int )) && $var <= $(( min + 3 * int )) )) && echo "#96cbfe"  ## blue
	(( $var > $(( min + 1 * int )) && $var <= $(( min + 2 * int )) )) && echo "#aaaaaa"  ## greyaa
	(( $var > $(( min + 0 * int )) && $var <= $(( min + 1 * int )) )) && echo "#999999"  ## grey99
	(( $var <= $(( min + 0 * int )) )) && echo  ## default

	## background
	(( $var > $(( min + 5 * int )) )) && echo  ## default
	(( $var > $(( min + 4 * int )) && $var <= $(( min + 5 * int )) )) && echo  ## default
	(( $var > $(( min + 3 * int )) && $var <= $(( min + 4 * int )) )) && echo  ## default
	(( $var > $(( min + 2 * int )) && $var <= $(( min + 3 * int )) )) && echo  ## default
	(( $var > $(( min + 1 * int )) && $var <= $(( min + 2 * int )) )) && echo  ## default
	(( $var > $(( min + 0 * int )) && $var <= $(( min + 1 * int )) )) && echo  ## default
	(( $var <= $(( min + 0 * int )) )) && echo  ## default

	## border
	(( $var > $(( min + 5 * int )) )) && echo  ## default
	(( $var > $(( min + 4 * int )) && $var <= $(( min + 5 * int )) )) && echo  ## default
	(( $var > $(( min + 3 * int )) && $var <= $(( min + 4 * int )) )) && echo  ## default
	(( $var > $(( min + 2 * int )) && $var <= $(( min + 3 * int )) )) && echo  ## default
	(( $var > $(( min + 1 * int )) && $var <= $(( min + 2 * int )) )) && echo  ## default
	(( $var > $(( min + 0 * int )) && $var <= $(( min + 1 * int )) )) && echo  ## default
	(( $var <= $(( min + 0 * int )) )) && echo  ## default
	;;

    *)
	## text
	(( $var > $(( min + 5 * int )) )) && echo "#ff6c60"  ## red
	(( $var > $(( min + 4 * int )) && $var <= $(( min + 5 * int )) )) && echo "#ffffb6"  ## yellow
	(( $var > $(( min + 3 * int )) && $var <= $(( min + 4 * int )) )) && echo "#ffbf00"  ## amber
	(( $var > $(( min + 2 * int )) && $var <= $(( min + 3 * int )) )) && echo "#96cbfe"  ## blue
	(( $var > $(( min + 1 * int )) && $var <= $(( min + 2 * int )) )) && echo "#aaaaaa"  ## greyaa
	(( $var > $(( min + 0 * int )) && $var <= $(( min + 1 * int )) )) && echo "#999999"  ## grey99
	(( $var <= $(( min + 0 * int )) )) && echo  ## default

	## background
	## (( $var > $(( min + 5 * int )) )) && echo  ## default
	## (( $var > $(( min + 4 * int )) && $var <= $(( min + 5 * int )) )) && echo  ## default
	## (( $var > $(( min + 3 * int )) && $var <= $(( min + 4 * int )) )) && echo  ## default
	## (( $var > $(( min + 2 * int )) && $var <= $(( min + 3 * int )) )) && echo  ## default
	## (( $var > $(( min + 1 * int )) && $var <= $(( min + 2 * int )) )) && echo  ## default
	## (( $var > $(( min + 0 * int )) && $var <= $(( min + 1 * int )) )) && echo  ## default
	## (( $var <= $(( min + 0 * int )) )) && echo  ## default
	echo "#ffbf00"  ## amber

	## border
	(( $var > $(( min + 5 * int )) )) && echo  ## default
	(( $var > $(( min + 4 * int )) && $var <= $(( min + 5 * int )) )) && echo  ## default
	(( $var > $(( min + 3 * int )) && $var <= $(( min + 4 * int )) )) && echo  ## default
	(( $var > $(( min + 2 * int )) && $var <= $(( min + 3 * int )) )) && echo  ## default
	(( $var > $(( min + 1 * int )) && $var <= $(( min + 2 * int )) )) && echo  ## default
	(( $var > $(( min + 0 * int )) && $var <= $(( min + 1 * int )) )) && echo  ## default
	(( $var <= $(( min + 0 * int )) )) && echo  ## default
	;;

esac
echo
