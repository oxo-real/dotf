#! /usr/bin/env sh

# sway-output monitor origo O(0.0) NW
# sway-output container origo O(0.0) NW
# dotool monitor origo O(0.0) NW

# usage: get-focus-data [debug]

args=$@

monitor_data ()
{
    # retrieve focused monitor data

    active_monitors=$(swaymsg -t get_outputs | jq -r '.[] | select(.active==true) | "\(.id),\(.name),\(.rect.x),\(.rect.y)"' | wc -l)
    monitor_focus_data=$(swaymsg -t get_outputs | jq -r '.[] | select(.focused==true) | "\(.id),\(.name),\(.serial),\(.rect.x),\(.rect.y),\(.rect.width),\(.rect.height),\(.make),\(.model)"')

    ## string to array
    IFS=',' read -r -a monitor_data_arr <<< "$monitor_focus_data"

    ## set monitor variables
    monitor_id=${monitor_data_arr[0]}
    monitor_name=${monitor_data_arr[1]}
    monitor_serial=${monitor_data_arr[2]}
    monitor_x=${monitor_data_arr[3]}
    monitor_y=${monitor_data_arr[4]}
    monitor_width=${monitor_data_arr[5]}
    monitor_height=${monitor_data_arr[6]}
    monitor_make=${monitor_data_arr[7]}
    monitor_model=${monitor_data_arr[8]}

    monitor_name_bar=$(printf '%s' "$monitor_name" | sed 's/"//g' | head -c 1)
}


workspace_data ()
{
    # retrieve focused workspace data

    workspace_focus_data=$(swaymsg -t get_workspaces | jq -r '.[] | select(.focused == true)')

    workspace_name=$(printf '%s' "$workspace_focus_data" | jq '.name')
    workspace_name_bar=$(printf '%s' "$workspace_focus_data" | jq '.name' | sed 's/"//g')
}


swaybar_data ()
{
    bar_id=$(swaymsg -t get_bar_config | grep 'bar' | cut -d '"' -f 2)
    bar_height=$(swaymsg -t get_bar_config "$bar_id" |  jq '.bar_height')
}


container_data ()
{
    # retrieve focused container data

    container_focus_data=$(swaymsg -t get_tree | jq -r '.. | select(.type?) | select(.focused == true) | "\(.id),\(.pid),\(.type),\(.name),\(.rect.x),\(.rect.y),\(.rect.width),\(.rect.height),\(.deco_rect.width),\(.deco_rect.height)"')


    ## string to array
    IFS=',' read -r -a container_data_arr <<< "$container_focus_data"

    ## set container variables
    container_id=${container_data_arr[0]}
    container_pid=${container_data_arr[1]}
    container_type=${container_data_arr[2]}
    container_name=${container_data_arr[3]}
    container_x=${container_data_arr[4]}
    container_y=${container_data_arr[5]}
    container_width=${container_data_arr[6]}
    container_height=${container_data_arr[7]}
    container_deco_width=${container_data_arr[8]}
    container_deco_height=${container_data_arr[9]}

    ## container types
    ### []= tiling
    ### <>= floating
    ### <M> monoocle
    ###      (maximized floating container)
    case $container_type in

	'con')
	    container_type_bar='[]='
	    ;;

	'floating_con')
	    container_type_bar='<>='

	    [[ $monitor_width == $container_width ]] && \
		[[ $(( monitor_height + bar_height )) == $monitor_height ]] && \
		container_type_bar='<M>'
	    ;;

	*)
	    # i.e. workspace
	    container_type_bar=''
	    ;;

    esac
}


pointer_data ()
{
    if [[ -n $container_id ]]; then

	## pointer container grid for dotool
	# grid_DIRx = (container_x + p * container_width ) / monitor_width
	# grid_DIRy = (container_y + q * container_height ) / monitor_height
	grid_Nx=$(echo "$container_x + (0.500 * $container_width) / $monitor_width" | bc)
	grid_Ny=$(echo "$container_y + (0.165 * $container_height) / $monitor_height" | bc)
	grid_NEx=$(( container_x + 0.835 * container_width ))
	grid_NEy=$(( container_y + 0.165 * container_height ))
	grid_Ex=$(( container_x + 0.835 * container_width ))
	grid_Ey=$(( container_y + 0.500 * container_height ))
	grid_SEx=$(( container_x + 0.835 * container_width ))
	grid_SEy=$(( container_y + 0.835 * container_height ))
	grid_Sx=$(( container_x + 0.500 * container_width ))
	grid_Sy=$(( container_y + 0.835 * container_height ))
	grid_SWx=$(( container_x + 0.165 * container_width ))
	grid_SWy=$(( container_y + 0.835 * container_height ))
	grid_Wx=$(( container_x + 0.165 * container_width ))
	grid_Wy=$(( container_y + 0.500 * container_height ))
	grid_NWx=$(( container_x + 0.165 * container_width ))
	grid_NWy=$(( container_y + 0.165 * container_height ))
	grid_Zx=$(( container_x + 0.500 * container_width ))
	grid_Zy=$(( container_y + 0.500 * container_height ))

    else

	grid_Nx=$(( 0.500 * container_width ))
	grid_Ny=$(( 0.165 * container_height ))
	grid_NEx=$(( 0.835 * container_width ))
	grid_NEy=$(( 0.165 * container_height ))
	grid_Ex=$(( 0.835 * container_width ))
	grid_Ey=$(( 0.500 * container_height ))
	grid_SEx=$(( 0.835 * container_width ))
	grid_SEy=$(( 0.835 * container_height ))
	grid_Sx=$(( 0.500 * container_width ))
	grid_Sy=$(( 0.835 * container_height ))
	grid_SWx=$(( 0.165 * container_width ))
	grid_SWy=$(( 0.835 * container_height ))
	grid_Wx=$(( 0.165 * container_width ))
	grid_Wy=$(( 0.500 * container_height ))
	grid_NWx=$(( 0.165 * container_width ))
	grid_NWy=$(( 0.165 * container_height ))
	grid_Zx=$(( 0.500 * container_width ))
	grid_Zy=$(( 0.500 * container_height ))

    fi
}


debug_data ()
{
    ## print debug data
    case "$args" in

	*debug*)
	    printf 'monitor_width %s\n' "$monitor_width"
	    printf 'monitor_height %s\n' "$monitor_height"

	    printf 'container_id %s\n' "$container_id"
	    printf 'container_pid %s\n' "$container_pid"
	    printf 'container_type %s\n' "$container_type"
	    printf 'container_name %s\n' "$container_name"
	    printf 'container_x %s\n' "$container_x"
	    printf 'container_y %s\n' "$container_y"
	    printf 'container_width %s\n' "$container_width"
	    printf 'container_height %s\n' "$container_height"
	    printf 'container_deco_width %s\n' "$container_deco_width"
	    ;;

    esac
}


main ()
{
    monitor_data
    workspace_data
    swaybar_data
    container_data
    #pointer_data
    debug_data
}

main
