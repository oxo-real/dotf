#! /usr/bin/env sh

## get data
i=$(ip route show to default | grep --perl-regexp --only-matching --ignore-case --word-regexp '(?<=\bdev )([a-zA-Z0-9-])+')

### check for interface
if [ -z "$i" ]; then
	exit
fi


# rx 	received on interface (bytes)
# tx 	transmitted on interface (bytes)
# t	timestamp (nanoseconds (10^-9))

rx0=$(cat /proc/net/dev | grep $i | awk '{print $2}')
#tx0=$(cat /proc/net/dev | grep $i | awk '{print $10}')
t0=$(date +%s%N)

sleep 1

rx1=$(cat /proc/net/dev | grep $i | awk '{print $2}')
#tx1=$(cat /proc/net/dev | grep $i | awk '{print $10}')
t1=$(date +%s%N)


# drx	received on interface (kilobytes)
# dtx 	transmitted on interface (kilobytes)
# dt	elapsed time (seconds)

drx=$((rx1-rx0))/1000
#dtx=$((tx1-tx0))/1000
dt=$(((t1-t0)/1000000000))


# vrx	receive speed on interface (kbytes/s)
# vtx 	transmit speed on interface (kbytes/s)

vrx=$(( drx / dt ))
#vtx=$(( dtx / dt ))

## color
var=$vrx  ## inverted values; lower is better
#var=$vtx  ## inverted values; lower is better

## minimum, maximum value and number of threshold (colors)
## number of colors = no_thr + 2
min=50
max=2500
no_thr=5

## interval size
int=$(echo "scale=0; ($max - $min) / $no_thr" | bc -l)

## full text
printf "%4s\n" "$vrx"
#printf "%4s\n" "$vtx"
#echo ${vrx}
#echo ${vrx}

## short text
echo  ## none

## text
(( $var > $(( min + 5 * int )) )) && echo "#ff6c60"  ## red
(( $var > $(( min + 4 * int )) && $var <= $(( min + 5 * int )) )) && echo "#ffffb6"  ## yellow
(( $var > $(( min + 3 * int )) && $var <= $(( min + 4 * int )) )) && echo "#ffbf00"  ## amber
(( $var > $(( min + 2 * int )) && $var <= $(( min + 3 * int )) )) && echo "#96cbfe"  ## blue
(( $var > $(( min + 1 * int )) && $var <= $(( min + 2 * int )) )) && echo "#aaaaaa"  ## greyaa
(( $var > $(( min + 0 * int )) && $var <= $(( min + 1 * int )) )) && echo "#999999"  ## grey99
(( $var <= $(( min + 0 * int )) )) && echo  ## default

## background
(( $var > $(( min + 5 * int )) )) && echo  ## default
(( $var > $(( min + 4 * int )) && $var <= $(( min + 5 * int )) )) && echo  ## default
(( $var > $(( min + 3 * int )) && $var <= $(( min + 4 * int )) )) && echo  ## default
(( $var > $(( min + 2 * int )) && $var <= $(( min + 3 * int )) )) && echo  ## default
(( $var > $(( min + 1 * int )) && $var <= $(( min + 2 * int )) )) && echo  ## default
(( $var > $(( min + 0 * int )) && $var <= $(( min + 1 * int )) )) && echo  ## default
(( $var <= $(( min + 0 * int )) )) && echo  ## default

## border
(( $var > $(( min + 5 * int )) )) && echo  ## default
(( $var > $(( min + 4 * int )) && $var <= $(( min + 5 * int )) )) && echo  ## default
(( $var > $(( min + 3 * int )) && $var <= $(( min + 4 * int )) )) && echo  ## default
(( $var > $(( min + 2 * int )) && $var <= $(( min + 3 * int )) )) && echo  ## default
(( $var > $(( min + 1 * int )) && $var <= $(( min + 2 * int )) )) && echo  ## default
(( $var > $(( min + 0 * int )) && $var <= $(( min + 1 * int )) )) && echo  ## default
(( $var <= $(( min + 0 * int )) )) && echo  ## default
