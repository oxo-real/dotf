#! /usr/bin/env sh

###        _ _
###   __ _| (_) __ _
###  / _` | | |/ _` |
### | (_| | | | (_| |
###  \__,_|_|_|\__,_|
###
###
###  # # # # # #
###       #
###  # # # # # #
###

: '
alia
zsh environment alias and function definitions
copyright (c) 2019 - 2024  |  oxo

GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org


# dependencies
  n/a

# usage
  mitigate usage alias or function for command, execute:
  \[command_alias], or
  command $command_alias

# examples
  n/a

# '


# application behaviour

## sudo with trailing space;
## on expansion check next word for alias substitution
## therefore also 'sudo $cmd' lets $cmd expand to alias
alias sudo='sudo '


function sudo ()
{
    ## sudo -k cannot be aliased
    ## therefore solution below
    case "$1" in

	-k)
	    doas -L
	    ;;

	*)
	    doas "$@"
	    ;;

    esac
}


function host ()
{
    command cat /etc/hostname
}

## always ort env variable list
alias env='env | sort'


# less and less related

## define colors for error (Emk), search (Swk) & prompt (P15.0)
## https://en.wikipedia.org/wiki/ANSI_escape_code#SGR
alias less='less --mouse --no-init --quit-if-one-screen --status-column --long-prompt -P m"\ ?f%f:stdin .?Lâˆ‘%L\ .?pt%pt\%\ .[?lt%lt-?lb%lb]\ ..?e[EOF]\ ." --use-color --color Emk --color SkW --color P15.0 -- "$@"'


## protect against shell command injection
### https://security.stackexchange.com/questions/56307/can-cat-ing-a-file-be-a-potential-security-risk/56323#56323
alias cat='bat'
#alias cat='cat --show-ends --show-nonprinting'
alias bat='bat --style plain "$@"'


## readnullcommand (READNULLCMD)
## command to assume if a single input redirection is specified with no command
## see zshenv for related READNULLCMD setting
## '< $file' behaviour
function read0cmd ()
{
    cat
    #less
}


## c (see) a file
## as < seems not to activate file completion and c is easier to type than <
## NOTICE combine with fzf-ins-pwd C-l for current directory
function c()
{
    cat
}


## manpages
alias man='man --no-hyphenation --no-justification --prompt="$MANLESS"'
#alias eman='emacs -e '(man "$1")''


# vim

alias vi='nvim'
alias vim='nvim'
alias vimdiff='nvim -d'


# emacs

## functions tempo disab for error:
#Warning: due to a long standing Gtk+ bug
#http://bugzilla.gnome.org/show_bug.cgi?id=85715
#Emacs might crash when run in daemon mode and the X11 connection is unexpectedly lost.
#Using an Emacs configured with --with-x-toolkit=lucid does not have this problem.
#Starting Emacs daemon.
#see also:
#[crash - Starting emacs in daemon mode freezes, emacsclient is not able find a socket - Emacs Stack Exchange](https://emacs.stackexchange.com/questions/14232/starting-emacs-in-daemon-mode-freezes-emacsclient-is-not-able-find-a-socket)
#[xorg - emacs --daemon crashing after closing emacsclient -c - Unix & Linux Stack Exchange](https://unix.stackexchange.com/questions/56871/emacs-daemon-crashing-after-closing-emacsclient-c)

function emacs-daemon ()
{
    # if no active daemon, then start service

    #daemon_active=$(ls /run/user/1000/emacs >/dev/null 2>&1 | wc -l)
    emacs_active=$(systemctl status --user emacs.service | \
                       grep Active: | \
                       awk '{print $2}')

    case $emacs_active in

	failed | inactive)
	    printf '%s\n' 'starting emacs.service...'
            systemctl start --user emacs.service
	    sleep 2
            ;;

    esac
}


function emacs ()
{
    emacs-daemon

    case "$1" in

	'-t'|'-nw'|'--tty' )
	    # use current tui

	    ## get file(s)
	    shift
	    files="$@"

	    emacsclient --tty --alternate-editor='' "$files"
	    ;;

	'-n'|'--gui' )
	    # use new gui frame

	    ## get file(s)
	    shift
	    files="$@"

	    ## last ampersand to start a separate process
	    ## brackets to prevent jobs running in current shell (new subshell)
	    (emacsclient --alternate-editor='' --create-frame "$files" > /dev/null 2>&1 &)
	    ;;

	'-nc' | '-dt' )
	    # start emacs 'desktop', no emacsclient

	    ## get file(s)
	    shift
	    files="$@"

	    ## brackets to prevent jobs running in current shell (new subshell)
	    (/bin/emacs "$files" > /dev/null 2>&1 &)
	    ;;

	'' )
	    # use existing gui frame (default)

	    ## last ampersand to start a separate process
	    ## brackets to prevent jobs running in current shell (new subshell)
	    (emacsclient --alternate-editor='' --reuse-frame > /dev/null 2>&1 &)
	    ;;

	* )
	    # use existing gui frame (default)
	    files="$@"

	    ## last ampersand to start a separate process
	    ## brackets to prevent jobs running in current shell (new subshell)
	    (emacsclient --alternate-editor='' --reuse-frame "$files" > /dev/null 2>&1 &)
	    ;;

    esac

    # gui emacs
    ## -c (--create-frame) starts always in new window
    ## </dev/null no output in current terminal window
    ## &>/dev/null start in new detached terminal window

    # tui emacs
    #emacsclient -t "$@"
}


function view ()
{
    # nvim readonly
    #nvim -R $@

    # emacs readonly
    emacs-daemon

    case "$1" in

	'-t'|'-nw'|'--tty' )
	    # use current tui

	    ## get file(s)
	    shift
	    files="$@"

	    emacsclient --tty --alternate-editor='' --eval "(view-file \"$files\")"
	    ;;

	'-n'|'--gui' )
	    # use new gui frame

	    ## get file(s)
	    shift
	    files="$@"

	    ## last ampersand to start a separate process
	    ## brackets to prevent jobs running in current shell (new subshell)
	    (emacsclient --alternate-editor='' --create-frame --eval "(view-file \"$files\")" > /dev/null 2>&1 &)
	    ;;

	'-nc' | '-dt' )
	    # start emacs 'desktop', no emacsclient

	    ## get file(s)
	    shift
	    files="$@"

	    ## brackets to prevent jobs running in current shell (new subshell)
	    (/bin/emacs --eval "view-file \"$files\")" > /dev/null 2>&1 &)
	    ;;

	*)
	    # use existing gui frame (default)
	    files="$@"

	    ## last ampersand to start a separate process
	    ## brackets to prevent jobs running in current shell (new subshell)
	    (emacsclient --alternate-editor='' --reuse-frame  --eval "(view-file \"$files\")" > /dev/null 2>&1 &)
	    ;;

    esac
}


#alias emacs="emacs $@ &"
alias em='emacs'
#alias em='emacs'
alias ev='view'


alias lsblk='lsblk --ascii --tree -o name,uuid,fstype,path,size,fsuse%,fsused,label,mountpoint'
# #alias cal='env TERM=xterm cal'
alias pwd='pwd && [[ $(command -v wl-copy) ]] && pwd | wl-copy -n'
alias tree='tree -n --charset=unicode'
#alias tree='env TERM=xterm-256color tree'
#alias zsh="env ZDOTDIR="$XDG_CONFIG_HOME/zsh" zsh"
alias rmln='unlink'
alias type='type -a'

alias figlet="figlet -d $XDG_CONFIG_HOME/figlet"


## generate qr code from clipboard
if command -v qrinv > /dev/null 2>&1; then

   function qr ()
   {
       # usage: qr $(wl-paste)
       #        echo hello | qr
       args="$@"
       [[ -z $@ ]] && args="$(</dev/stdin)"
       ## qrcode inverse colors
       qrinv "$args"
       ## qrcode default colors
       #qrencode --type utf8 "$args"
   }

fi


## cli browsing
alias qb='qutebrowser'
alias sr="sr -browser=$BROWSERCLI"
alias surfraw="surfraw -browser=$BROWSER"


# file operations

## file listing
alias ls="echo; ls --group-directories-first --color=auto"
alias fd='fd --color always'
alias dir='dir --group-directories-first --color=auto'
alias vdir='vdir --group-directories-first --color=auto'

## extracting information
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

## file manipulation
alias cp='cp --archive --interactive --verbose'
alias mv='mv --interactive --verbose'
alias rm='trash'
alias mkdir='mkdir --parents --verbose'


## rsync for copy and move (better for large files)
function cpr ()
{
    rsync --archive --partial --verbose --info=progress2,stats2 --human-readable --modify-window=1 "$@"
}


function mvr ()
{
    rsync --archive --partial --verbose --info=progress2,stats2 --human-readable --modify-window=1 --remove-source-files "$@"
}


## eza for ls
#if command -v eza > /dev/null; then
#
#    alias ls="echo; $XDG_CONFIG_HOME/eza/eza_wrapper.sh"
#
#else
#
#    alias ls="echo; ls --color=auto"
#    #alias ls="echo; command ls $LS_OPTIONS"
#
#fi


# audio

## mpv
alias mpv='mpv --audio-display=no'

## pipewire
alias beep="pw-play $BEEP"
alias play='pw-play'

## pulseaudio
#alias beep="paplay $BEEP"


function say ()
{
    # usage: say sdate
    #        sdate | say
    spch="$@"
    [[ -z $@ ]] && spch="$(</dev/stdin)"
    echo "$spch" | festival --tts
}


# time

alias now='date +%s'

function nwx ()
{
    ## 20250125_052505
    printf '%X\n' "$(date +'%s')"
}

function dtx ()
{
    ## 20250125_082604_6794920C
    printf '%s_%X\n' "$(date $DT)" "$(date +'%s')"
}

## (for say)
alias sdate="date +'%A %d %B %Y'"
alias sweek="echo week $(date +%V)"
alias stime='date +%R'


# operating system

alias osid='c /etc/os-release && echo && hostnamectl'


# network

#alias myip='dig myip.opendns.com @resolver1.opendns.com +dnssec +short'
alias myip='curl icanhazip.com'
alias exip='myip'
alias pubip='myip'
alias ping9='ping -D -i 1 -c 3 9.9.9.9'


# shell

alias ppid='ps -p $$ -o ppid='


# application configuration

## w3m -config is right, not --config as expected
alias w3m="w3m -config $XDG_CONFIG_HOME/w3m/config"
alias fim='fim --no-history'
alias zathura='zathura --fork'
alias calc='qalc'
