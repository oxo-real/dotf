#! /usr/bin/env zsh

###        _ _
###   __ _| (_) __ _
###  / _` | | |/ _` |
### | (_| | | | (_| |
###  \__,_|_|_|\__,_|
###
###
###  # # # # # #
###       #
###  # # # # # #
###

: '
alia
zsh environment alias and function definitions
copyright (c) 2019 - 2024  |  oxo

GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org


# dependencies
  n/a

# usage
  mitigate usage alias or function for command, execute:
  \[command_alias], or
  command $command_alias

# examples
  n/a

# '


# application behaviour

## sudo with trailing space;
## on expansion check next word for alias substitution
## therefore also 'sudo $cmd' lets $cmd expand to alias
alias sudo='sudo '


function sudo()
{
    ## sudo -k cannot be aliased
    ## therefore solution below
    case "$1" in

	-k)
	    doas -L
	    ;;

	*)
	    doas "$@"
	    ;;

    esac
}


function host()
{
    command cat /etc/hostname
}

## always ort env variable list
alias env='env | sort'


# less and less related

## define colors for error (Emk), search (Swk) & prompt (P15.0)
## https://en.wikipedia.org/wiki/ANSI_escape_code#SGR
alias less='less --mouse --no-init --quit-if-one-screen --status-column --long-prompt -P m"\ ?f%f:stdin .?Lâˆ‘%L\ .?pt%pt\%\ .[?lt%lt-?lb%lb]\ ..?e[EOF]\ ." --use-color --color Emk --color SkW --color P15.0 -- "$@"'

## readnullcommand (READNULLCMD)
## command to assume if a single input redirection is specified with no command
## see zshenv for related READNULLCMD setting
## '< $file' behaviour
function read0cmd()
{
    less
}

## manpages
alias man='man --no-hyphenation --no-justification --prompt="$MANLESS"'
#alias eman='emacs -e '(man "$1")''


# vim

alias vi='nvim'
alias vim='nvim'
alias vimdiff='nvim -d'


# emacs

function emacs_daemon()
{
    # if no active daemon, then start service

    #daemon_active=$(ls /run/user/1000/emacs >/dev/null 2>&1 | wc -l)
    emacs_active=$(systemctl status --user emacs.service | \
                       grep Active: | \
                       awk '{print $2}')

    case $emacs_active in

	failed | inactive)
	    printf "starting emacs.service...\n"
            systemctl start --user emacs.service
	    sleep 2
            ;;

	*)
	    :
	    ;;

    esac
}


function emacs()
{
    emacs_daemon

    case "$1" in

	'-t'|'-nw'|'--tty')
	    # use current tui
	    shift
	    files="$@"
	    emacsclient --alternate-editor='' --tty "$files"
	    ;;

	'--gui')
	    # use new gui frame
	    shift
	    files="$@"
	    ## last ampersand to start a separate process
	    ## brackets to prevent jobs running in current shell (new subshell)
	    (emacsclient --alternate-editor='' --create-frame "$files" > /dev/null 2>&1 &)
	    ;;

	'')
	    # start emacs 'desktop', not via emacsclient
	    ## brackets to prevent jobs running in current shell (new subshell)
	    (command emacs > /dev/null 2>&1 &)
	    #/bin/emacs
	    #disown  ## possible instead of brackets
	    ;;

	*)
	    # use new gui frame (default)
	    files="$@"
	    ## last ampersand to start a separate process
	    ## brackets to prevent jobs running in current shell (new subshell)
	    (emacsclient --alternate-editor='' --create-frame "$files" > /dev/null 2>&1 &)
	    ;;

    esac

    # gui emacs
    ## -c (--create-frame) starts always in new window because it is gui
    ## </dev/null no output in current terminal window
    ## &>/dev/null start in new detached terminal window

    # tui emacs
    #emacsclient -t "$@"
}


#alias emacs="emacs $@ &"
alias em='emacs'


function view()
{
    # nvim readonly
    #nvim -R $@

    # emacs readonly
    emacs_daemon

    case "$1" in

	'-t'|'-nw'|'--tty')
	    # use current tui
	    shift
	    files="$@"
	    emacsclient --alternate-editor='' --tty --eval "(view-file \"$files\")"
	    ;;

	'--gui')
	    # use new gui frame
	    shift
	    files="$@"
	    ## last ampersand to start a separate process
	    ## brackets to prevent jobs running in current shell (new subshell)
	    (emacsclient --alternate-editor='' --create-frame --eval "(view-file \"$files\")" > /dev/null 2>&1 &)
	    ;;

	*)
	    # use new gui frame (default)
	    files="$@"
	    ## last ampersand to start a separate process
	    ## brackets to prevent jobs running in current shell (new subshell)
	    (emacsclient --alternate-editor='' --create-frame  --eval "(view-file \"$files\")" > /dev/null 2>&1 &)
	    ;;

    esac
}


alias ev='view'


alias lsblk='lsblk --ascii --tree -o name,uuid,fstype,path,size,fsuse%,fsused,label,mountpoint'
# #alias cal='env TERM=xterm cal'
alias tree='tree -n --charset=unicode'
#alias tree='env TERM=xterm-256color tree'
#alias zsh="env ZDOTDIR="$XDG_CONFIG_HOME/zsh" zsh"
alias mpv='mpv --audio-display=no'
alias rmln='unlink'
alias figlet="figlet -d $XDG_CONFIG_HOME/figlet"


if command -v qrinv > /dev/null 2>&1; then

   function qr()
   {
       # usage: qr $(wl-paste)
       #        echo hello | qr
       args="$@"
       [[ -z $@ ]] && args="$(</dev/stdin)"
       ## qrcode inverse colors
       qrinv "$args"
       ## qrcode default colors
       #qrencode --type utf8 "$args"
   }

fi


## protect against shell command injection
### https://security.stackexchange.com/questions/56307/can-cat-ing-a-file-be-a-potential-security-risk/56323#56323
#alias cat='cat --show-ends --show-nonprinting'
alias cat='bat'
alias bat='bat --style=numbers'

alias sr="sr -browser=$BROWSERCLI"
alias surfraw="surfraw -browser=$BROWSER"


# file operations

alias cp='cp --archive --interactive --verbose'
#alias cp='rsync -aAXv --info=ALL --human-readable'
alias mv='mv --interactive --verbose'
#alias mv='rsync -aAXv --info=ALL --human-readable && rm -rf $1'
alias rm='trash'
alias mkdir='mkdir --parents --verbose'
alias lf='lfcd'


function cpr()
{
    ## rsync for copy and move (better for large files)
    rsync --archive --partial --verbose --info=progress2,stats2 --human-readable --modify-window=1 "$@"
}


function mvr()
{
    rsync --archive --partial --verbose --info=progress2,stats2 --human-readable --modify-window=1 --remove-source-files "$@"
}

## ls
if command -v eza > /dev/null; then

    alias ls="echo; $XDG_CONFIG_HOME/eza/eza_wrapper.sh"

else

    alias ls="echo; ls --color=auto"
    #alias ls="echo; command ls $LS_OPTIONS"

fi

alias dir='dir --color=auto'
alias vdir='vdir --color=auto'

alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'


# audio

# pipewire
alias beep="pw-play $BEEP"
# pulseaudio
#alias beep="paplay $BEEP"


function say()
{
    # usage: say sdate
    #        sdate | say
    spch="$@"
    [[ -z $@ ]] && spch="$(</dev/stdin)"
    echo "$spch" | festival --tts
}


# time

alias now='date +%s'
## (for say)
alias sdate="date +'%A %d %B %Y'"
alias sweek="echo week $(date +%V)"
alias stime='date +%R'


# application configuration

## w3m -config is right, not --config as expected
alias w3m="w3m -config $XDG_CONFIG_HOME/w3m/config"
alias fim='fim --no-history'
alias zathura='zathura --fork'
alias calc='qalc'


# network

#alias myip='dig myip.opendns.com @resolver1.opendns.com +dnssec +short'
alias myip='curl icanhazip.com'
alias exip='myip'
alias pubip='myip'
