#
##
###            _
###    _______| |__  _ __ ___
###   |_  / __| '_ \| '__/ __|
###  _ / /\__ \ | | | | | (__
### (_)___|___/_| |_|_|  \___|
###
###  _ _|_ _ ._    _  _
### (_\/|_(_)|_)\/(_|(/_
###   /      |  /  _|
###
### .zshrc
### zsh runcom configuration
### 2019 - 2022  |  cytopyge
###
##
#

# inspiration
# http://zsh.sourceforge.net/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell
# https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh
# https://shreevatsa.wordpress.com/2008/03/30/zshbash-startup-files-loading-order-bashrc-zshrc-etc/

# PATH
path+=("$HOME/.local/bin")
path+=("$HOME/.config/shln")

export path

# xdg environment

## configuration
export XDG_CONFIG_DIRS="/etc/xdg"
export XDG_CONFIG_HOME="$HOME/.config"
## data
export XDG_DATA_HOME="$HOME/.local/share"
## logs
export XDG_LOGS_HOME="$HOME/.logs"
## cache
export XDG_CACHE_HOME="$HOME/.cache"

# z shell environment variables

export DEFAULT_VI_MODE=viins
export KEYTIMEOUT=1

## default applications
export VISUAL='/usr/bin/nvim'
export EDITOR='/usr/bin/nvim'
export PAGER='/usr/bin/less'
export BROWSER='/usr/bin/qutebrowser'
export BROWSERCLI='/usr/bin/w3m'
export READER='/usr/bin/zathura'
export TERMINAL='/usr/bin/alacritty'
export VIDEO='/usr/bin/mpv'
export COLORTERM='truecolor'
export OPENER='/usr/bin/xdg-open'
export SHELL='/usr/bin/zsh'

export FZF_DEFAULT_OPTS='--cycle --layout=reverse --info=inline --bind ctrl-u:clear-query --preview="tree -L 1 {}" --preview-window=:hidden --color=dark,prompt:#ff00ff,pointer:#ffff00,spinner:#00ff00'

## signposts to config
export ZDOTDIR="$XDG_CONFIG_HOME/zsh"
export GNUPGHOME="$XDG_CONFIG_HOME/gnupg"
export TMSU_DB="$XDG_DATA_HOME/c/tag/.tmsu/db"
#export SYSMAILCAP="$XDG_CONFIG_HOME/neomutt/mailcap"
export NOTMUCH_CONFIG="$XDG_CONFIG_HOME/notmuch/notmuch_config"
export LESSHISTFILE="$XDG_CONFIG_HOME/less/.lesshst"
export WEECHAT_HOME="$XDG_CONFIG_HOME/weechat"
export GPG_TTY="$(tty)"
export USER_AGENT="$(head -n 1 $XDG_CONFIG_HOME/network/ua/default)"

# color output
## italic / inverse: see notes/cal
export TERM='screen-256color'
## tmux colors
[ -n "$TMUX" ] && export 'TERM=tmux-256color'


# git status for __git_ps1

## unstaged (*), staged (+)
export GIT_PS1_SHOWDIRTYSTATE=1
## stashed ($)
export GIT_PS1_SHOWSTASHSTATE=1
## untracked (%)
export GIT_PS1_SHOWUNTRACKEDFILES=1
## behind (<), ahead (>), equal (=) to upstream
export GIT_PS1_SHOWUPSTREAM='auto'
export GIT_PS1_SHOWUPSTREAM=1
## color
export GIT_PS1_SHOWCOLORHINTS='true'
export GIT_PS1_SHOWCOLORHINTS=1
## ignored directories
export GIT_PS1_HIDE_IF_PWD_IGNORED=1


# shell parameters
source $XDG_CONFIG_HOME/code/zsh/git-prompt.sh
autoload -U colors && colors
setopt auto_pushd
bindkey -v

# fix some important keys:
## get SIGTERM string via `cat` and
## pressing the targeted key there
## backspace key
bindkey "^?" backward-delete-char
## delete key
bindkey "^[[3~" delete-char


## completion style based of 'default' zls_colors
## see zsh manual:
#@ http://zsh.sourceforge.net/Doc/Release/Zsh-Modules.html#The-zsh_002fcomplist-Module

ZLS_COLORS=\
"no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:\
bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:\
lc=\e[:rm=m:tc=00:sp=00:ma=07:hi=00:du=00:\
*.tar=31:*.tgz=31:\
*.arj=31:*.taz=31:*.lzh=31:*.zip=31:\
*.z=31:*.Z=31:*.gz=31:*.deb=31:\
*.jpg=35:*.gif=35:*.bmp=35:*.ppm=35:\
*.tga=35:*.xbm=35:*.xpm=35:*.tif=35:\
*.mpg=01;35:*.avi=01;35:*.gl=01;37:*.dl=01;37:\
*.mp4=01;35:*.webm=01;35:*.mkv=01;35:\
*.mp3=36"

zstyle ':completion:*' list-colors $ZLS_COLORS

## ls_colors as zls_colors; variables removed that generated ls errors
## see also:
## http://linux-sxs.org/housekeeping/lscolors.html

LS_COLORS=\
"no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:\
bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:\
lc=\e[:\
*.tar=31:*.tgz=31:\
*.arj=31:*.taz=31:*.lzh=31:*.zip=31:\
*.z=31:*.Z=31:*.gz=31:*.deb=31:\
*.jpg=35:*.gif=35:*.bmp=35:*.ppm=35:\
*.tga=35:*.xbm=35:*.xpm=35:*.tif=35:\
*.mpg=01;35:*.avi=01;35:*.gl=01;37:*.dl=01;37:\
*.mp4=01;35:*.webm=01;35:*.mkv=01;35:\
*.mp3=36"

export LS_COLORS


# aliases
[[ -f $XDG_CONFIG_HOME/code/zsh/aliases ]] && \
	source $XDG_CONFIG_HOME/code/zsh/aliases


# synthesize prompt (precmd, preexec, left and right prompt)

# define cursor styles
function __def_cursor() {

    local style

    case $1 in

        reset)
			# to default
			style=0
			;;

		block_blink)
			# default
			style=1
			;;

		block_steady)
			style=2
			;;

		underline_blink)
			style=3
			;;

		underline_steady)
			style=4
			;;

		vertical-line_blink)
			style=5
			;;

		vertical-line_steady)
			style=6
			;;

		*)
			style=0
			;;

    esac

	## define cursor
    [ $style -ge 0 ] && echo -n "\e[${style} q"

}


# define text style with select & paste
zle_highlight=(\
	isearch:fg=#bbbbbb,bg=#000000 \
	region:fg=#000000,bg=#555555 \
	special:fg=#bbbbbb,bg=#000000 \
	suffix:fg=#bbbbbb,bg=#000000 \
	paste:fg=#bbbbbb,bg=#000000
)


# set cursor styles
function __set_cursor() {

    case $KEYMAP in

        main | viins)
			__def_cursor vertical-line_blink
			;;

        vicmd)
			__def_cursor block_blink
			;;

        visual)
			__def_cursor block_steady
			;;

		*)
			__def_cursor underline_blink
			;;

    esac

}


function zle-keymap-select() {

    #__set_ps1
    __set_cursor
    zle reset-prompt

}


function zle-line-init() {

    zle -K $DEFAULT_VI_MODE
    #__set_ps1
    __set_cursor
    zle reset-prompt

}


function zle-line-finish() {

    #__set_ps1
    __set_cursor
    zle reset-prompt

}


# precmd
## runs before each prompt
function precmd() {

	# get t1 for $time_exec (ns)
	t1_exec=`date +%s%N`

	# get execution time (ms)
	## prevent errors if empty t0_exec (i.e. zsh (re)start)
	[[ -n $t0_exec ]] && \
		time_exec=$( echo "scale=0; ( $t1_exec - $t0_exec ) / 1000000 " | bc -l )

	# time_exec prettyfied
	t_ex_pretty=$(printf "%4s" "$time_exec")

	# prompt path color
	if [[ -w $PWD ]]; then

		local precmd_left="%F{blue}%B%~%f%b $(__git_ps1 "[%s] ")"

	else

		local precmd_left="%F{#ffff00}%B%~%f%b $(__git_ps1 "[%s] ")"

	fi

	### right side
	if 	[[ -n $t0_exec ]]; then

		# histcounter prettyfied by +100k
		local precmd_right="$t_ex_pretty $((HISTCMD -1 +100000)) %D{%H%M%S}"
		#local precmd_right="$t_ex_pretty %! %D{%H%M%S}"
		#%! runs only inside session

	else

		local precmd_right="%D{%H%M%S}"

	fi

	### position, alignment and correction parameters
	local ppl_corr=0
	local ppr_corr=0
	local precmd_left_length=$(( ${#${(S%%)precmd_left//(\%([KF1]|)\{*\}|\%[Bbkf])}}+$ppl_corr ))
	local precmd_right_length=$(( ${#${(S%%)precmd_right//(\%([KF1]|)\{*\}|\%[Bbkf])}}+$ppr_corr ))
	local num_filler_spaces=$((COLUMNS - precmd_right_length))

	### print

	print -Pr "${(l:$num_filler_spaces:)}$precmd_right"
	print -Pr "$precmd_left"

	unset t0_exec

}


# strlen
## called by preexec
function strlen() {
    FOO=$1
    local zero='%([BSUbfksu]|([FB]|){*})'
    LEN=${#${(S%%)FOO//$~zero/}}
    echo $LEN
}

# preexec
# run before each command execution
function preexec() {

	# get t0 for $time_exec (ns)
	# not equal to (pretty) start_time!!
	t0_exec=`date +%s%N`

	start_time=$( date +"%H%M%S" )
    local len_right=$( strlen "$start_time" )
    len_right=$(( $len_right + 1 ))
    local right_start=$(( $COLUMNS - $len_right ))

    local len_cmd=$( strlen "$@" )
    local len_prompt=$( strlen "$PROMPT" )
    local len_left=$(( $len_cmd + $len_prompt ))

    RDATE="\033[${right_start}C ${start_time}"

    if [ $len_left -lt $right_start ]; then

        # no right prompt overwriting
        # we can move one line up
        echo -e "\033[1A${RDATE}"

	else

		echo -e "${RDATE}"

	fi

}


zle -N zle-line-init
zle -N zle-keymap-select
zle -N zle-line-finish


# left and right prompt

setopt PROMPT_SUBST

## left prompt
PS1="%(?..%F{magenta}%B%?%f%b)%# "

# right prompt
## commandID with running time
## TRAPALRM breaks fzf and zsh completion
#RPS1="%! %D{%H%M%S}"
#TMOUT=1
#TRAPALRM() {
#    zle reset-prompt
#}


# history

## location of the history file
HISTFILE=$XDG_LOGS_HOME/history/history

## maximum number of history events to save in the history file
SAVEHIST=1000000

## maximum number of events stored in the internal history list
HISTSIZE=1000000

## when trimming history file, first trim from duplicate entries
setopt HIST_EXPIRE_DUPS_FIRST

## prefix a command with a space keeps it out of history
setopt HIST_IGNORE_SPACE

## remove superfluous blanks
setopt HIST_REDUCE_BLANKS

## This option both imports new commands from the history file,
## and also causes your typed commands to be appended to the history file.
## The latter is like specifying INC_APPEND_HISTORY,
## which should be turned off if this option is in effect.
## The history lines are also output with timestamps ala EXTENDED_HISTORY.
setopt SHARE_HISTORY

## (multiple parallel) zsh sessions will (all) append their history to the
## history file
#setopt APPEND_HISTORY

## add commands to history file in realtime, instead of when shell exits
## comment out if SHARE_HISTORY is active
#setopt INC_APPEND_HISTORY

## command execution time is written after command is finished
## therefore history entry is available no sooner than after command execution
#setopt INC_APPEND_HISTORY_TIME

## add epoch time and execution time data in history
## comment out if SHARE_HISTORY is active
###setopt EXTENDED_HISTORY


# completion
zmodload zsh/complist
zstyle ':completion:*' menu select
autoload -Uz compinit promptinit
compinit

## include dotfiles
_comp_options+=(globdots)
promptinit
CASE_SENSITIVE='true'


# pwd, statistics and ls on chpwd
function chpwd() {
	## prompt path color
	if [[ -w $PWD ]]; then

		local left_bar="%F{blue}%B%~%f%b"

	else

		local left_bar="%F{#ffff00}%B%~%f%b"

	fi

	## directory count
	d_cnt=$(find . -maxdepth 1 -type d | tail -n +2 | wc -l)
	## hidden directory count
	dh_cnt=$(find . -maxdepth 1 -type d -name '.*' | tail -n +2 | wc -l)
	## visible directory count
	dv_cnt=$((d_cnt-dh_cnt))

	## file count
	f_cnt=$(find . -maxdepth 1 -type f | wc -l)
	## hidden file count
	fh_cnt=$(find . -maxdepth 1 -type f -name '.*' | wc -l)
	## visible file count
	fv_cnt=$((f_cnt-fh_cnt))

	## symlink count
	l_cnt=$(find . -maxdepth 1 -type l | wc -l)
	## hidden symlink count
	lh_cnt=$(find . -maxdepth 1 -type l -name '.*' | wc -l)
	## visible symlink count
	lv_cnt=$((l_cnt-lh_cnt))

	## total item count
	ti_cnt=$((d_cnt+f_cnt+l_cnt))

	## right bar
	### sigma
	rb1=$(printf "\e[1;90m∑\e[0m")
	### total count
	rb2=$(printf "\e[1;90m $ti_cnt \e[0m")
	### directories
	rb3=$(printf "\e[1;94;100m $dv_cnt.$dh_cnt \e[0m")
	### files
	rb4=$(printf "\e[0;39;49m $fv_cnt.$fh_cnt \e[0m")
	### symlinks
	rb5=$(printf "\e[1;36;100m $lv_cnt.$lh_cnt \e[0m")

	### synthesized
	right_bar=$(printf $rb1$rb2$rb3$rb4$rb5)

	## position, alignment and correction parameters
	### alacritty
	local lb_corr=0
	local rb_corr=-66
	local lb_length=$(( ${#${(S%%)left_bar//(\%([KF1]|)\{*\}|\%[Bbkf])}}+$lb_corr ))
	local rb_length=$(( ${#${(S%%)right_bar//(\%([KF1]|)\{*\}|\%[Bbkf])}}+rb_corr ))
	local bar_filler_spaces=$((COLUMNS - lb_length - rb_length ))

	print -Pr "$left_bar${(l:$bar_filler_spaces:)}$right_bar"
	echo

	## testing alignment
	#print $COLUMNS $lb_length $bar_filler_spaces $rb_length
	## end testing alignment

	ls -A

}


#~~~~~~~~~~~~~~~~~~~~~~~#
#  KEYBOARD SHORTCUTS	#
#~~~~~~~~~~~~~~~~~~~~~~~#

# for info on zsh keybindings:
# showkey --scancodes
# bindkey -l (zsh keymaps)
# bindkey -M <keymap>
# man zshzle
# zsh -f /usr/share/zsh/functions/Misc/zkbd
# find keycode in zsh terminal with ctrl-v and then the combo


# spawn terminal into cwd
## --> see sway config


#>>>>>>>>>>>>>	function insert_date_time
# add (+=) date and time to cursor position (^@) (ctrl @)

function insert_date_time()
{
	LBUFFER+="$(date +%Y%m%d_%H%M%S)"
}

zle -N insert_date_time
bindkey "^@" insert_date_time


#>>>>>>>>>>>>>	function git_add_commit
# git add & commit shortcut (^g) (ctrl g)

function git_add_commit() {

	BUFFER="git add . && git commit -a -m '`date +%Y%m%d_%H%M%S` (local_update)'"

}

zle -N git_add_commit
bindkey "^a" git_add_commit


#>>>>>>>>>>>>>> function up_dir
# updir shortcut (^k) (ctrl k)

function up_dir() {

	BUFFER="cd .."
	zle accept-line

}

zle -N up_dir
bindkey "^k" up_dir


#>>>>>>>>>>>>>> function last_dir
# last_dir shortcut (^h) (ctrl h)
## bash: 'cd -'

function last_dir() {

	BUFFER="cd $OLDPWD"
	zle accept-line

}

zle -N last_dir
bindkey "^h" last_dir


#>>>>>>>>>>>>>> function fzf_q_task
# fzf query task (^n) (ctrl n)
# get task id

function fzf_q_task() {

	# select & yank
	zle select-in-blank-word
	zle kill-region
	fzf_input="$CUTBUFFER"

	# fzf query
	fzf_output="$(task list | \
		fzf --query=`printf "$fzf_input"` | awk '{print $1}')"

	# analyze fzf output
	[ -z "$fzf_output" ] && \
		CUTBUFFER="$fzf_input" || \
		CUTBUFFER="$fzf_output "

	# replace selection
	zle put-replace-selection

	# clear buffer
	CUTBUFFER=""

	# move cursor to the end of the line and enter viins mode
	zle vi-add-eol
	#bindkey -v

}

zle -N fzf_q_task
bindkey "^n" fzf_q_task


#>>>>>>>>>>>>>> function fzf_ins_home
# fzf insert file or directory (^f) (ctrl f)
# search from home

function fzf_ins_home()
{
	# select & yank
	zle select-in-blank-word
	zle kill-region
	fzf_input="$CUTBUFFER"
	[[ -z "$fzf_input" ]] && fzf_input="$HOME"

	# fzf query
	fzf_output="$(fd -uu . "$HOME" | \
		fzf --query=`printf "$fzf_input"`)"

	# analyze fzf output
	[ -z "$fzf_output" ] && \
		CUTBUFFER="$fzf_input" || \
		CUTBUFFER="$fzf_output"

	# replace selection
	zle put-replace-selection

	unset CUTBUFFER
	unset fzf_input
}

zle -N fzf_ins_home
bindkey "^f" fzf_ins_home


#>>>>>>>>>>>>>> function fzf_ins_root
# fzf insert file or directory (^F) (ctrl F)
# search from root

function fzf_ins_root()
{
	# select & yank
	zle select-in-blank-word
	zle kill-region
	fzf_input="$CUTBUFFER"
	[[ -z "$fzf_input" ]] && fzf_input="/"

	# fzf query
	fzf_output="$(fd -uu . \/ | \
		fzf --query=`printf "$fzf_input"`)"

	# analyze fzf output
	[ -z "$fzf_output" ] && \
		CUTBUFFER="$fzf_input" || \
		CUTBUFFER="$fzf_output"

	# replace selection
	zle put-replace-selection

	unset CUTBUFFER
	unset fzf_input
}

zle -N fzf_ins_root
bindkey "^g" fzf_ins_root


#>>>>>>>>>>>>>> function sudo_toggle
# sudo-toggle (vicmd s)

function sudo_toggle()
{
	[[ -z $BUFFER ]] && zle up-history

	if [[ $BUFFER == sudo\ * ]]; then
		#already sudo; remove sudo
		BUFFER="${BUFFER#sudo }"
	else
		BUFFER="sudo $BUFFER" #add sudo
	fi

	zle -R $BUFFER #refresh
}

zle -N sudo_toggle #create widget
bindkey -M vicmd 's' sudo_toggle


#>>>>>>>>>>>>>> function histdel
# histdel
# Control+backspace
# [TODO]
#function histdel()
#{
#	export shiftbackspace=1
#	sh $XDG_DATA_HOME/c/git/code/tools/histdel
#}
#
#zle -N histdel
#bindkey '^H' histdel


#>>>>>>>>>>>>>> function foreground
# foreground
# Control+backspace
function foreground()
{
	fg;
}

zle -N foreground
bindkey '^Z' foreground


#>>>>>>>>>>>>>> function mountr
# mountr
# Control+Shift+backslash
function mountr() {

	sh $XDG_DATA_HOME/c/git/code/tools/mountr

}

zle -N mountr
bindkey '^\\' mountr


# syntax highlighting
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh


# base16-shell colorscheme
## https://github.com/chriskempson/base16-shell
BASE16_SHELL="$XDG_CONFIG_HOME/base16-shell/"
[ -n "$PS1" ] && \
    [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
        eval "$("$BASE16_SHELL/profile_helper.sh")"


# fzf
[ -f ~/.config/fzf/.fzf.zsh ] && source ~/.config/fzf/.fzf.zsh
#
# .config/fzf/.fzf/shell/key-bindings.zsh
# defines:
# CTRL-T - Paste the selected file path(s) into the command line
# ALT-C - cd into the selected directory
# CTRL-R - Paste the selected command from history into the command line
#
# FZF_DEFAULT_OPS environment variable defines fzf default options

## fzf-tab
source $XDG_CONFIG_HOME/fzf-tab/fzf-tab.zsh
