#! /usr/bin/env sh

# dependencies:	jq, alacritty

# spawn a new terminal window

# NOTICE status experimental
# TODO DEV

# usage: term_spawn $directory [float [w $con_width h $con_height]]

# example: term_spawn $HOME float w 300 h 300


args="$@"


initialize()
{
#terminal_cmd=${TERMINAL:-'foot'}
terminal_cmd=${TERMINAL:-'alacritty'}
target_path=$1
[[ $# -gt 1 ]] && shift target_con_float=$1 && shift && target_con_dims="$@"
}


get_curr_con_data()
{
    ## check container type, width and height
    curr_con_type=$(swaymsg -t get_tree | jq -r '.. | select(.type?) | select(.focused?) | .type')
    curr_con_width=$(swaymsg -t get_tree | jq '.. | select(.type?) | select(.focused?) | .rect.width')
    curr_con_height=$(swaymsg -t get_tree | jq '.. | select(.type?) | select(.focused?) | .rect.height')
    #curr_con_width=$(swaymsg -t get_tree | jq '.. | select(.type?) | select(.focused == true) | .rect.width')
    #curr_con_height=$(swaymsg -t get_tree | jq '.. | select(.type?) | select(.focused == true) | .rect.height')
}


split_auto()
{
    ## set the split direction to the longest side
    if [[ $curr_con_width -gt $curr_con_height ]]; then

	split_dir='splith'

    else

	split_dir='splitv'

    fi

    ## set split direction for focused container
    swaymsg "$split_dir"
}


process_target_path()
{
    case $target_path in

	pwd)
	    # get focused process ID

	    focused_pid=""
	    focused_pid="$(swaymsg -t get_tree | \
   			jq '.. |
   			select(.type?) |
   			select(.focused==true) |
			.pid')"


	    # readlink from focused ppid cwd

	    ## check if $focused_pid is an integer
	    if [ "$focused_pid" -eq "$focused_pid" 2>/dev/null ]; then

		## get focused parent process ID
		focused_ppid="$(ps -o pid= --ppid "$focused_pid" | awk '{print $1}')"

		## get focused present working directory
		if [ "$focused_ppid" 2>/dev/null ]; then

		    focused_pwd="$(readlink "/proc/$focused_ppid/cwd")"

		fi

	    else

		focused_pwd="$HOME"

	    fi
	    ;;

	'')
	    focused_pwd="$HOME"
	    ;;

	*)
	    focused_pwd="$target_path"
	    ;;

    esac
}


process_dim_args()
{
    while [[ "$1" ]]; do

	case "$1" in

	    'w')
		shift
		target_con_width=$1
		;;

	    h)
		shift
		target_con_height=$1
		;;
	esac

	shift

    done
}


resize_float()
{
    [[ -n $target_con_width ]] || target_con_width=800
    [[ -n $target_con_height ]] || target_con_height=600

    ## TODO DEV not working because no focus
    swaymsg resize set width $target_con_width
    swaymsg resize set height $target_con_height
}


spawn_float()
{
    ## spawn terminal
    ## NOTICE --no-startup-id to prevent
    ## warning: queue 0x7efe7c000ca0 destroyed while proxies still attached
    #swaymsg exec --no-startup-id $($terminal_cmd --working-directory="$focused_pwd" --app-id="term_float") &
    swaymsg exec --no-startup-id $($terminal_cmd --working-directory="$focused_pwd" --class="term_float") &

    if [[ -n "$target_con_dims" ]]; then

    	process_dim_args $target_con_dims
    	#TODO fix this
	#resize_float

    fi
}


spawn_tile()
{
    split_auto

    ## spawn terminal
    swaymsg exec --no-startup-id $($terminal_cmd --working-directory="$focused_pwd") &
    #swaymsg exec $($terminal_cmd --working-directory="$focused_pwd") &
}


spawn_terminal()
{
    if [[ "$target_con_float" == 'float' ]]; then

	spawn_float

    else

	spawn_tile

    fi
}


main()
{
    initialize "$args"
    get_curr_con_data
    process_target_path
    spawn_terminal
}

main
