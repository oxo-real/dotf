#! /usr/bin/env sh

## usage
## sh snap-move-to [--id $con_id] direction

args="$@"


csc="$XDG_CONFIG_HOME/sway/code"


# get container data
source "$csc/get-parameters"


initialize()
{
    script_name='snap_move_to'
    usage="usage: $script_name [-i,--id $con_id] NW|N|NE|E|SE|S|SW|W|Z|left|down|up|right
move sway container to screen corner, edge or center.
OPTIONS:
-i|--id $con_id    move a designated container"

    ## loop through all arguments
    while [[ "$1" ]]; do

        case "$1" in

            NW|N|NE|E|SE|S|SW|W|Z)
		# snap floating container
                direction="$1"
                break
                ;;

	    left|down|up|right)
		# shift floating container
		direction="$1"
		shift
		## amount
		amount="$@"
		break
		;;

            -i|--id)
		## get id value
                shift
                con_id="$1"
		## get direction in next while loop
                shift
                ;;

            -h|--help)
                printf '%s\n' "$usage"
                exit 0
                ;;

            *)
                printf '%s: no valid argument\n' "$script_name"
                exit 51
                ;;

	esac

    done

    return 0
}


snap_or_move()
{
    case "$container_type" in

	## floating container
	"floating_con")

	    case $amount in

		'')
		    # no amount given
		    case $direction in

			NW)
			    new_x=0
			    new_y=0
			    ;;

			N)
			    new_x=$(( ( monitor_width - container_width ) / 2))
			    new_y=0
			    ;;

			NE)
			    new_x=$(( monitor_width - container_width ))
			    new_y=0
			    ;;

			E)
			    new_x=$(( monitor_width - container_width ))
			    new_y=$(( ( monitor_height - container_height - decor_height ) / 2))
			    ;;

			SE)
			    new_x=$(( monitor_width - container_width ))
			    new_y=$(( monitor_height - container_height - decor_height ))
			    ;;

			S)
			    new_x=$(( ( monitor_width - container_width ) / 2 ))
			    new_y=$(( monitor_height - container_height - decor_height ))
			    ;;

			SW)
			    new_x=0
			    new_y=$(( monitor_height - container_height - decor_height ))
			    ;;

			W)
			    new_x=0
			    new_y=$(( ( monitor_height - container_height - decor_height ) / 2))
			    ;;

			Z)
			    new_x=$(( ( monitor_width - container_width ) / 2 ))
			    new_y=$(( ( monitor_height - container_height - decor_height ) / 2 ))
			    ;;

			left)
			    new_x=0
			    new_y=$(( new_y - decor_height ))
			    ;;

			down)
			    new_y=$(( monitor_height - container_height - decor_height ))
			    ;;

			up)
			    new_y=0
			    ;;

			right)
			    new_x=$(( monitor_width - container_width ))
			    new_y=$(( new_y - decor_height ))
			    ;;

		    esac

		    swaymsg "move position $new_x $new_y"

		    ## TODO direction set; second time same direction make tile and move
		    ;;

		*)
		    # amount given
		    ## shift container, no snap
		    swaymsg "move $direction ${amount}"
		    ;;

	    esac

	    #swaymsg "move position $new_x $new_y"
	    ;;

	## tiling container
	"con")

	    case $direction in
		NW)
		    swaymsg "move up"
		    swaymsg "move left"
		    ;;

		N|up)
		    swaymsg "move up"
		    ;;

		NE)
		    swaymsg "move up"
		    swaymsg "move right"
		    ;;

		E|right)
		    swaymsg "move right"
		    ;;

		SE)
		    swaymsg "move right"
		    swaymsg "move down"
		    ;;

		S|down)
		    swaymsg "move down"
		    ;;

		SW)
		    swaymsg "move down"
		    swaymsg "move left"
		    ;;

		W|left)
		    swaymsg "move left"
		    ;;

		Z)
		    :
		    ;;

	    esac
	    ;;

    esac
}


main()
{
    ## NOTICE no quotation around $args
    ## with quoted $args: "$args"
    ## initialize() receives only one argument
    initialize $args
    #set_params
    snap_or_move
}

main
