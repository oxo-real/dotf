#! /usr/bin/env sh


args="$@"


initialize()
{
    script_name='snap_move_to'
    usage="usage: $script_name [-i,--id <id>] NW|N|NE|E|SE|S|SW|W|Z|left|down|up|right
move sway window to screen corner, edge or center.
OPTIONS:
-i|--id <id>    move a designated window"

    ## loop through all arguments
    while [[ "$1" ]]; do

        case "$1" in

            NW|N|NE|E|SE|S|SW|W|Z)
		# snap floating window
                direction="$1"
                break
                ;;

	    left|down|up|right)
		# shift floating window
		direction="$1"
		shift
		## amount
		amount="$@"
		break
		;;

            -i|--id)
		## get id value
                shift
                id="$1"
		## get direction in next while loop
                shift
                ;;

            -h|--help)
                printf '%s\n' "$usage"
                exit 0
                ;;

            *)
                printf '%s: no valid argument\n' "$script_name"
                exit 51
                ;;

	esac

    done

    return 0
}


set_params()
{
    monitor_dimensions=$(
	swaymsg -t get_workspaces |
	    jq -r '.. | select(.focused?) |
	    select(.type=="workspace") |
	    .rect |
	    "\(.width)x\(.height)"' \
		      )

    monitor_width=${monitor_dimensions%x*}
    monitor_height=${monitor_dimensions#*x}

    selection=".focused?"
    criteria=
    [[ "$id" ]] && \
	{
	    selection=".id == $id"
	    criteria="[con_id = $id]"
	}

    mapfile -t window_params_arr < <( \
	swaymsg -t get_tree | \
	    jq -r ".. |
	    select(.type?) |
	    select($selection) |
	    .rect.x, .rect.y,
	    .rect.width, .rect.height,
	    .deco_rect.height, .type" \
		)

    new_x=${window_params_arr[0]}
    new_y=${window_params_arr[1]}
    window_width=${window_params_arr[2]}
    window_height=${window_params_arr[3]}
    decor_height=${window_params_arr[4]}
    window_type=${window_params_arr[5]}
}


snap_or_move()
{
    case "$window_type" in

	## floating container
	"floating_con")

	    case $amount in

		'')
		    # no amount given
		    case $direction in

			NW)
			    new_x=0
			    new_y=0
			    ;;

			N)
			    new_x=$(( ( monitor_width - window_width ) / 2))
			    new_y=0
			    ;;

			NE)
			    new_x=$(( monitor_width - window_width ))
			    new_y=0
			    ;;

			E)
			    new_x=$(( monitor_width - window_width ))
			    new_y=$(( ( monitor_height - window_height - decor_height ) / 2))
			    ;;

			SE)
			    new_x=$(( monitor_width - window_width ))
			    new_y=$(( monitor_height - window_height - decor_height ))
			    ;;

			S)
			    new_x=$(( ( monitor_width - window_width ) / 2 ))
			    new_y=$(( monitor_height - window_height - decor_height ))
			    ;;

			SW)
			    new_x=0
			    new_y=$(( monitor_height - window_height - decor_height ))
			    ;;

			W)
			    new_x=0
			    new_y=$(( ( monitor_height - window_height - decor_height ) / 2))
			    ;;

			Z)
			    new_x=$(( ( monitor_width - window_width ) / 2 ))
			    new_y=$(( ( monitor_height - window_height - decor_height ) / 2 ))
			    ;;

			left)
			    new_x=0
			    new_y=$(( new_y - decor_height ))
			    ;;

			down)
			    new_y=$(( monitor_height - window_height - decor_height ))
			    ;;

			up)
			    new_y=0
			    ;;

			right)
			    new_x=$(( monitor_width - window_width ))
			    new_y=$(( new_y - decor_height ))
			    ;;

		    esac

		    swaymsg "${criteria}move position $new_x $new_y"

		    ## TODO direction set; second time same direction make tile and move
		    ;;

		*)
		    # amount given
		    ## shift window, no snap
		    swaymsg "move $direction ${amount}"
		    ;;

	    esac

	    #swaymsg "${criteria}move position $new_x $new_y"
	    ;;

	## tiling container
	"con")

	    case $direction in
		NW)
		    swaymsg "${criteria}move up"
		    swaymsg "${criteria}move left"
		    ;;

		N|up)
		    swaymsg "${criteria}move up"
		    ;;

		NE)
		    swaymsg "${criteria}move up"
		    swaymsg "${criteria}move right"
		    ;;

		E|right)
		    swaymsg "${criteria}move right"
		    ;;

		SE)
		    swaymsg "${criteria}move right"
		    swaymsg "${criteria}move down"
		    ;;

		S|down)
		    swaymsg "${criteria}move down"
		    ;;

		SW)
		    swaymsg "${criteria}move down"
		    swaymsg "${criteria}move left"
		    ;;

		W|left)
		    swaymsg "${criteria}move left"
		    ;;

		Z)
		    :
		    ;;

	    esac
	    ;;

    esac
}


main()
{
    ## NOTICE no quotation around $args
    ## with quoted $args: "$args"
    ## initialize() receives only one argument
    initialize $args
    set_params
    snap_or_move
}

main
