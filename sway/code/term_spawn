#! /usr/bin/env sh

# dependencies:	jq, alacritty

# spawn a new terminal window

# usage: term_spawn $directory
#
# NOTICE status experimental
# TODO DEV
# usage: term_spawn $directory [w $con_width h $con_height]


terminal_cmd=${TERMINAL:-'alacritty'}
target_path=$1
shift
target_con_dims=$@


get_curr_con_data()
{
    ## check container type, width and height
    curr_con_type=$(swaymsg -t get_tree | jq -r '.. | select(.type?) | select(.focused?) | .type')
    curr_con_width=$(swaymsg -t get_tree | jq '.. | select(.type?) | select(.focused?) | .rect.width')
    curr_con_height=$(swaymsg -t get_tree | jq '.. | select(.type?) | select(.focused?) | .rect.height')
    #curr_con_width=$(swaymsg -t get_tree | jq '.. | select(.type?) | select(.focused == true) | .rect.width')
    #curr_con_height=$(swaymsg -t get_tree | jq '.. | select(.type?) | select(.focused == true) | .rect.height')
}


process_target_path()
{
    case $target_path in

	'pwd')
	    # get focused process ID

	    focused_pid=""
	    focused_pid="$(swaymsg -t get_tree | \
   			jq '.. |
   			select(.type?) |
   			select(.focused==true) |
			.pid')"


	    # readlink from focused ppid cwd

	    ## check if $focused_pid is an integer
	    if [ "$focused_pid" -eq "$focused_pid" 2>/dev/null ]; then

		## get focused parent process ID
		focused_ppid="$(ps -o pid= --ppid "$focused_pid" | awk '{print $1}')"

		## get focused present working directory
		focused_pwd=""
		if [ "$focused_ppid" 2>/dev/null ]; then

		    focused_pwd="$(readlink "/proc/$focused_ppid/cwd")"

		fi

	    fi
	    ;;

	'')
	    focused_pwd="$HOME"
	    ;;

	*)
	    focused_pwd="$target_path"

    esac
}


process_dims()
{
    if [[ -n "$target_con_dims" ]]; then

	while [[ "$1" ]]; do

	    case "$1" in

		w)
		    shift
		    target_con_width=$1
		    ;;

		h)
		    shift
		    target_con_height=$1
		    ;;
	    esac

	    shift

	done

    fi
}


split_auto()
{
    ## set the split direction to the longest side
    if [[ $curr_con_width -gt $curr_con_height ]]; then

	split='splith'

    else

	split='splitv'

    fi
}


spawn_terminal()
{
    if [[ "$curr_con_type" == "floating_con" ]]; then

	spawn_float

    elif [[ "$curr_con_type" == "con" ]]; then

	spawn_tile

    fi
}


spawn_float()
{
    # TODO DEV does not spawn float
    #swaymsg exec $($terminal_cmd --working-directory="$focused_pwd") --class="term_float" &
    #swaymsg exec sh $csc/snap_move_to SE

    swaymsg for_window [app_id="term_float_xy"]
    {
	floating enable
    	resize set width $target_con_width
    	resize set height $target_con_height
    	move position 0 0
    	opacity set 0.8
    }

    swaymsg exec $($terminal_cmd --working-directory="$focused_pwd") --class="term_float_xy" &

    # workaround with dotool
    #swaymsg exec $($terminal_cmd --working-directory="$focused_pwd") &
    #echo key meta+alt+period | dotool
}


spawn_tile()
{
    ## designate split direction
    split_auto
    ## set split direction for focused container
    swaymsg "$split"
    ## spawn terminal
    swaymsg exec $($terminal_cmd --working-directory="$focused_pwd") &
}


main()
{
    get_curr_con_data
    process_target_path
    process_dims
    spawn_terminal
}

main
