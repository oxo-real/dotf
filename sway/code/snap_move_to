#! /usr/bin/env sh


args="$@"


initialize()
{
    script_name='snap_move_to'
    usage="usage: $script_name [-i,--id <id>] NW|N|NE|E|SE|S|SW|W|LEFT|DOWN|UP|RIGHT|Z
move sway window to screen corner, edge or center.
OPTIONS:
-i|--id <id>    move a designated window"

    ## loop through all arguments
    while [[ "$1" ]]; do

	printf '%s\n' "$1"
        case "$1" in

            -h|--help)
                echo "$usage"
                exit 0
                ;;

            NW|N|NE|E|SE|S|SW|W|Z)
		# snap floating window
                direction="$1"
                break
                ;;

	    left|down|up|right)
		# shift floating window
		direction="$1"
		shift
		## amount
		amount="$@"
		break
		;;

            -i|--id)
		## get id value
                shift
                id="$1"
		## get direction in next while loop
                shift
                ;;

            *)
                echo "${script_name}: bad argument" >&2
                exit 1
                ;;

	esac

    done

    return 0
}


set_params()
{
    monitor_dimensions=$( swaymsg -t get_workspaces |
			      jq -r '.. | select(.focused?) | select(.type=="workspace") | .rect | "\(.width)x\(.height)"' )
    monitor_width=${monitor_dimensions%x*}
    monitor_height=${monitor_dimensions#*x}

    selection=".focused?"
    criteria=
    [[ "$id" ]] && {
	selection=".id == $id"
	criteria="[con_id = $id] "
    }

    mapfile -t win_param < <( swaymsg -t get_tree |
				  jq -r ".. | select(.type?) | select($selection)|.rect.x, .rect.y, .rect.width, .rect.height, .deco_rect.height, .type" )

    new_x=${win_param[0]}
    new_y=${win_param[1]}
    win_width=${win_param[2]}
    win_height=${win_param[3]}
    deco_height=${win_param[4]}
    win_type=${win_param[5]}
}


snap_or_move()
{
    case "$win_type" in

	## floating container
	"floating_con")

	    case $amount in

		'')
		    # no amount given
		    case $direction in

			up)
			    new_y=0
			    ;;

			down)
			    new_y=$(( monitor_height - win_height - deco_height ))
			    ;;

			left)
			    new_x=0
			    new_y=$(( new_y - deco_height ))
			    ;;

			right)
			    new_x=$(( monitor_width -  win_width ))
			    new_y=$(( new_y - deco_height ))
			    ;;

			N)
			    new_x=$(( ( monitor_width -  win_width ) / 2))
			    new_y=0
			    ;;

			W)
			    new_x=0
			    new_y=$(( ( monitor_height - win_height - deco_height ) / 2))
			    ;;

			E)
			    new_x=$(( monitor_width -  win_width ))
			    new_y=$(( ( monitor_height - win_height - deco_height ) / 2))
			    ;;

			S)
			    new_x=$(( ( monitor_width -  win_width ) / 2 ))
			    new_y=$(( monitor_height - win_height - deco_height ))
			    ;;

			NW)
			    new_x=0
			    new_y=0
			    ;;

			NE)
			    new_x=$(( monitor_width -  win_width ))
			    new_y=0
			    ;;

			SE)
			    new_x=$(( monitor_width -  win_width ))
			    new_y=$(( monitor_height - win_height - deco_height ))
			    ;;

			SW)
			    new_x=0
			    new_y=$(( monitor_height - win_height - deco_height ))
			    ;;

			Z)
			    new_x=$(( ( monitor_width -  win_width ) / 2 ))
			    new_y=$(( ( monitor_height - win_height - deco_height ) / 2 ))
			    ;;

		    esac

		    swaymsg "${criteria}move position $new_x $new_y"
		    ;;

		*)
		    # amount given
		    ## shift window, no snap
		    swaymsg "move $direction ${amount}"
		    ;;

	    esac

	    #swaymsg "${criteria}move position $new_x $new_y"
	    ;;

	## tiling container
	"con")

	    case $direction in
		up|N)
		    swaymsg "${criteria}move up"
		    ;;

		down|S)
		    swaymsg "${criteria}move down"
		    ;;

		left|W)
		    swaymsg "${criteria}move left"
		    ;;

		right|E)
		    swaymsg "${criteria}move right"
		    ;;

		NW)
		    swaymsg "${criteria}move up"
		    swaymsg "${criteria}move left"
		    ;;

		NE)
		    swaymsg "${criteria}move up"
		    swaymsg "${criteria}move right"
		    ;;

		SW)
		    swaymsg "${criteria}move down"
		    swaymsg "${criteria}move left"
		    ;;

		SE)
		    swaymsg "${criteria}move right"
		    swaymsg "${criteria}move down"
		    ;;

		Z)
		    : #DEV TODO minimize / hide
		    ;;

	    esac
	    ;;

    esac
}


main()
{
    ## NOTICE no quoatation for $args
    ## that sends entire string to $1
    initialize $args
    set_params
    snap_or_move
}

main
