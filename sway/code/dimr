#! /usr/bin/env sh
#
##
### dimr
###	creates options for swaylock
###
### (c) 2019 - 2024  |  oxo
###
### usage:
###
###	% dimr swaylock-enable
###	enables swaylock timer to lock system after 2 * idle_time
###
###	% dimr swaylock-disable
###	disables swaylock timer function
###
###	% dimr screen-off [idle_time]
###	immediate screen_off
###
###	% dimr swaylock [idle_time]
###	initiate swaylock
##
#

option=$1
idle_time=$2

[[ "$SWAYSOCK" ]] &&
{
    csc="$XDG_CONFIG_HOME/sway/code"
    dimr="$csc/dimr"
    lock="$csc/lock"

    [[ -z $option ]] && exit 1
    [[ -z $idle_time ]] && idle_time=120


    swaylock_status()
    {
	## status: ''/(no_)/swaylock
	## awk NF: last field
	swaylock_status=$(ps -ef | \
	    grep -v ^root | \
	    grep 'swayidle -w' | \
	    grep 'dimr' | \
	    awk -F : '{print $4}' | \
	    awk 'NF>1{print $NF}')
    }


    swaylock_exec()
    {
	sh $lock
    }


    screen_off_exec()
    {
    	swaylock_status

	# [Sway - ArchWiki](https://wiki.archlinux.org/title/Sway#Idle)
	# lock the screen before suspending and pause any playing media
	#swayidle -w \
	#	 before-sleep 'playerctl pause' \
	#	 before-sleep 'swaylock'

	if [[ "$swaylock_status" == "no-swaylock" ]]; then

	    pkill swayidle

	    swayidle -w \
	        timeout 1   'swaymsg "output * power off"' \
	        resume	    'swaymsg "output * power on"; $($dimr swaylock_disable)'

	elif [[ "$swaylock_status" == "swaylock" ]]; then

	    pkill swayidle

	    swayidle -w \
	        timeout 1   'swaymsg "output * power off"' \
	        resume	    'swaymsg "output * power on"; $($dimr swaylock_enable $idle_time)'

	else

	    # undefined or other swaylock_status
	    pkill swayidle

	    swayidle -w \
	        timeout 1   'swaymsg "output * power off"' \
	        resume	    'swaymsg "output * power on"'

	fi
    }


    swaylock_enable()
    {
	pkill swayidle

	notify-send "$option $idle_time"

        swayidle -w \
	    timeout $(( 1 * idle_time )) \
		'$(dimr swaylock)' \
	    timeout $(( 2 * idle_time )) \
		    'swaymsg "output * power off"' \
	        resume 'swaymsg "output * power on"' \
	    timeout $(( 3 * idle_time )) \
		'$(systemctl suspend)'
		#after-resume 'notify-send "$option $idle_time"'
	        #before-sleep '$($dimr swaylock)' \
    }


    swaylock_disable()
    {
	pkill swayidle

	notify-send "$option"

	swayidle -w \
	    timeout $(( 1 * idle_time )) \
	        'swaymsg "output * power off"' \
                resume		'swaymsg "output * power on"' \
	        before-sleep	'$($dimr no_swaylock)' \
		after-resume	'notify-send "$option"'
    }


    case "$option" in

	swaylock)
	    ## immediate swaylock
	    swaylock_exec
	    ;;

	screen_off)
	    ## immediate screen off
	    screen_off_exec
	    ;;

	swaylock_disable)
	    ## disable swaylock
	    swaylock_disable
	    ;;

        swaylock_enable | *)
	    ## enable swaylock
	    swaylock_enable
            ;;

    esac

    exit 0
}


    test_block()
    {
	: '
	# now:
	1 swaylock
	2 screenoff
	3 suspend
	#TODO want:
	1 screensaver fullscreen no lock
	2 swaylock
        3 screenoff
	4 susspend

	       swaymsg fullscreen enable && \
	       exec $term --class="term_fullscreen" -e \

	    timeout $(( 1 * idle_time )) \
		'swaymsg exec --no-startup-id $(alacritty --class="term_float" --command feh --fullscreen /home/oxo/.cache/temp/lock.png && swaymsg fullscreen enable)'
	        resume          'kill -STOP $(pgrep feh)' \
		after-resume    'notify-send "resumed"' \

	1 screensaver
	this works on the commandline:
	swaymsg fullscreen enable exec --no-startup-id $(alacritty --class="term_fullscreen" --command feh --fullscreen /home/oxo/.cache/temp/lock.png) &

	NOTICE swaymsg output dpms is deprecated, use power
	# '
    }
