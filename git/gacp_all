#!/usr/bin/env bash

#
##
### git add commit push all repos
###
##
#

#[TODO] case remote repo is offline, easily switch off

git_main_config="$XDG_CONFIG_HOME/git/config"
git_sign_key=$(grep signingkey $git_main_config | awk '{print $3}')
git_ssh_key='oxo'
repo_tree_md='repo_tree.md'

git_repo_mon_list="$XDG_CONFIG_HOME/git/git_repo_mon_list"
# TODO list is for the time being hardcoded
# TODO redirection $HOME and $XDG_DATA_HOME


source_dir="$XDG_DATA_HOME/c/git/code/source/function"
source $source_dir/get_sudo
source $source_dir/reply_functions
source $source_dir/text_appearance


ssh_init() {

    eval $(ssh-agent) && ssh-add $XDG_DATA_HOME/c/keys/ssh/$git_ssh_key
}


ssh_kill() {

    ssh-agent -k
}


get_git_pwd() {

    case $remote_repo in

	codeberg)
	    passr codeberg_cytopyg3 peacto
	    #pass show codeberg_cytopyg3 | head -n 1 | wl-copy -n -o
	    ;;

	gitlab)
	    passr gitlab_cytopyge peacto
	    #pass show gitlab_cytopyge | grep peacto | awk '{print $2}' | wl-copy -n -o
	    ;;

    esac
}

get_git_repo_data() {

    git_branch=$(git branch | awk '{print $2}')
    git_config=$(git remote -v)
    git_status=$(git status -sb)
}


loop_through_file() {

    # TODO hardcoded values
    local git_remote='origin'
    local remote_host='codeberg'

    while IFS= read -r -u 29 line; do

	push_need=0

        #while IFS= read -r line <&9; do
        ## fd redirection because of nested read
        ## https://stackoverflow.com/questions/1521462/looping-through-the-content-of-a-file-in-bash
        ## https://www.cyberciti.biz/faq/bash-loop-over-file/
        ## http://mywiki.wooledge.org/BashFAQ/089
        ## see shell command 'read' in notes
        ## zsh knows no read -u option

	# skip commented lines
        if [[ $(printf "$line" | head -c 1) == '#' ]]; then

            continue

        fi

        cd $line

	create_repo_tree $line

	get_git_repo_data

	git_add
	git_commit
	git_push

    done 29< $git_repo_mon_list
}


git_add() {

    # files to be added
    echo
    pwd
    printf "$git_status\n"

    if [[ -n $(printf "$git_status" | grep '??') ]]; then

    	printf "add? (Y/n) "
    	reply_read_single
	echo

	if printf "$reply" | grep -iq "^n"; then

    	    printf "skipping add\n"

       	else

    	    git add .
    	    echo

       	fi

    fi
}


git_commit() {

    # files to be committed

    if [[ $(printf "$git_status" | wc -l) -gt 0 ]]; then

	printf "commit? (Y/n) "

	reply_read_single
	echo

	if printf "$reply" | grep -iq "^n"; then

	    printf "skipping commit\n"

	else

	    repo_name=$(printf "$line" | awk -F / '{print $NF}')
	    timestamp=$(date +%Y%m%d_%H%M%S)
	    message="$timestamp (update_mon)"

	    ## gpg cache status (1=cached)
	    #gpg_cache_status=$(gpg-connect-agent 'keyinfo --list' /bye 2>/dev/null | awk 'BEGIN{CACHED=0} /^S/ {if($7==1){CACHED=1}} END{if($0!=""){print CACHED} else {print "0"}}')

	    #if [[ $gpg_cache_status != 1 ]]; then

	    passr gpg_oxo password

	    #fi

	    # no password for ssh
	    case $method in https) get_git_pwd;; esac

	    git commit -S -a -m "$message"

	    push_need=1

	    echo

	fi

    fi
}


git_push() {

    # push repo to remote

    if [[ $push_need -eq 1 ]] || \
	   [[ -n $(printf "$git_status" | grep 'ahead') ]]; then

	printf "push? (Y/n) "
	reply_read_single
	echo

	if printf "$reply" | grep -iq "^n"; then

	    printf "skipping push\n"

	else

	    # start ssh agent
	    if [[ -z $SSH_AGENT_PID ]]; then

	    	passr ssh_oxo password
	    	ssh_init

	    fi

	    remote_list=$(printf "$git_config" | grep push)
	    #remote_list=$(printf "$git_config" | grep push | awk '{print $1}')

	    # alternative
	    #git push all_ssh

	    while IFS= read -r -u 180 line; do

		info_current_remote="$line"
		#info_current_remote=$(printf "$git_config" | grep push | grep $line)

		echo
		printf "$info_current_remote\n"

		# if push_mode is https then get username and password
		if [[ -n $(echo "$info_current_remote" | grep 'https://') ]]; then

		    #.git/config
		    #https://user:pass@codeberg.org/note.git
		    #git@codeberg.org:user/note.git
		    push_mode=https
		    remote=$(printf "$info_current_remote" | cut -f 1)
		    username=$(printf "$info_current_remote" | slicer '//' '@')

		    #printf "DEV202 $remote\n"
		    #printf "DEV202 $username\n"
		    #printf "DEV202 passr ${remote}_${username} peacto"
		    passr ${remote}_${username} peacto
		    #exit 255

		fi

		remote=$(printf "$info_current_remote" | cut -f 1)
		git push "$remote"

		unset push_mode
		unset remote
		unset username

	    done 180<<< $remote_list
	fi

    fi
}


create_repo_tree() {

    git_status_sb=$(git status -sb)

    case $git_status_sb in

	'## main...origin/main')
	    :
	    ;;

	*)
	    printf '```\n' > $1/$repo_tree_md
	    tree $1 >> $1/$repo_tree_md
	    printf '```\n' >> $1/$repo_tree_md
	    ;;

    esac

}


main() {

    get_sudo
    loop_through_file
}

main
