#!/usr/bin/env bash

# match with main git config!!
sign_key='0x6AE5B577A658681A'

host_repo_1='codeberg.org'
remote_repo_1='codeberg'
user_repo_1='cytopyg3'

host_repo_2='gitlab.com'
remote_repo_2='gitlab'
user_repo_2='cytopyge'

source_dir="$XDG_DATA_HOME/c/git/code/source/function"
source $source_dir/get_sudo
source $source_dir/reply_functions
source $source_dir/text_appearance


git_repo_mon_list="$XDG_CONFIG_HOME/git/git_repo_mon_list"
# list is for the time being hardcoded
#[TODO] redirection $HOME and $XDG_DATA_HOME


get_git_pwd()
{
	case $remote_repo in

		codeberg)
			pass show codeberg_cytopyg3 | head -n 1 | wl-copy -n -o
			;;

		gitlab)
			pass show gitlab_cytopyge | grep peacto | awk '{print $2}' | wl-copy -n -o
			;;

	esac
}


loop_through_file()
{
    # first repo, so here the adding, committing and signing is done

    local host_repo=$host_repo_1
    local user_repo=$user_repo_1


    while IFS= read -r -u "$fd" line; do

        #while IFS= read -r line <&9; do
        ## fd redirection because of nested read
        ## https://stackoverflow.com/questions/1521462/looping-through-the-content-of-a-file-in-bash
        ## https://www.cyberciti.biz/faq/bash-loop-over-file/
        ## http://mywiki.wooledge.org/BashFAQ/089
        ## see shell command 'read' in notes
        ## zsh knows no read -u option

        if [[ $(printf "$line" | head -c 1) == '#' ]]; then

            continue

        fi

        cd $line
        echo
        pwd
        git_status=$(git status -sb)
        printf "$git_status\n"

        if [ "$git_status" != "## master...$remote_repo/master" ]; then

       	# files to be added
       	if [[ -n $(echo "$git_status" | grep '??') ]]; then

    	    printf "git add? (Y/n) "
    	    reply_single
       	    #read -s -n 1 reply

       	fi


       	if printf "$reply" | grep -iq "^n"; then

    	    echo
    	    printf "skipping git add\n"

       	else

    	    git add .
    	    echo

       	fi

       	# files to be committed and pushed
       	printf "git commit & push? (Y/n) "
       	reply_single
       	#read -s -n 1 reply


       	if printf "$reply" | grep -iq "^n"; then

    	    echo
    	    printf "skipping git commit & push\n"

       	else

	    curr_repo=$(printf "$line" | awk -F / '{print $NF}')
    	    timestamp=$(date +%Y%m%d_%H%M%S)
    	    message="$timestamp (update_mon)"
    	    get_git_pwd
	    #TODO check address
    	    git commit -S -a -m "$message" && git push $user_repo@$host_repo/$curr_repo
    	    echo

       	fi

        fi

    done {fd}< $git_repo_mon_list
}


loop_through_file_repo_n()
{
    # repo n, because more repos can be added using this same function
    # adding, committing and signing is already done, so we're only pushing here

    local host_repo=$host_repo_2
    local user_repo=$user_repo_2


    while IFS= read -r -u "$fd" line; do

        #while IFS= read -r line <&9; do
        ## fd redirection because of nested read
        ## https://stackoverflow.com/questions/1521462/looping-through-the-content-of-a-file-in-bash
        ## https://www.cyberciti.biz/faq/bash-loop-over-file/
        ## http://mywiki.wooledge.org/BashFAQ/089
        ## see shell command 'read' in notes
        ## zsh knows no read -u option

        if [[ $(printf "$line" | head -c 1) == '#' ]]; then

            continue

        fi

        cd $line
        echo
        pwd
	git_status=$(git status -sb)
        printf "$git_status\n"

	curr_repo=$(printf "$line" | awk -F / '{print $NF}')
    	get_git_pwd
	#TODO check address
        git push $user_repo@$host_repo/$curr_repo
        echo

    done {fd}< $git_repo_mon_list
}


unset_env_username()
{
    export GIT_USERNAME=''
    unset GIT_USERNAME
}


main()
{
    get_sudo
    loop_through_file
    loop_through_file_repo_n
    unset_env_username
}

main
