#!/usr/bin/env sh
#
# list files runcom
#

# resources

#[Tips · gokcehan/lf Wiki · GitHub](https://github.com/gokcehan/lf/wiki/Tips#toggling-the-preview-column)
#[lf command - github.com/gokcehan/lf - Go Packages](https://pkg.go.dev/github.com/gokcehan/lf#hdr-File_Operations)

#[TODO] image viewer under wayland


# basic config

# interpreter for shell commands
set shell sh
set shellopts '-eu'
set ifs "\n"

set sortby natural
set info
set ratios 1:2:3
#set scrolloff 10
set wrapscroll true
#set icons
set period 1
#set number
set relativenumber false
set numberfmt "\033[37m"
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set hidden true
set preview true
set autoquit true

#`acc` shows the pressed keys (e.g. for bindings with multiple key presses or counts given to bindings).
#`progress` shows the progress of file operations (e.g. copying a large directory).
#`selection` shows the number of files that are selected, or designated for being cut/copied.
#`filter` shows 'F' if a filter is currently being applied.
#`ind` shows the current position of the cursor as well as the number of files in the current directory.
#`df` shows the amount of free disk space remaining.
#Names starting with `lf_` show the value of environment variables exported by lf.
set ruler 'df:acc:progress:selection:filter:ind'

&[ $LF_LEVEL -eq 1 ] || lf -remote "send $id echoerr \"Warning: You're in a nested lf instance!\""

cmd setbg "$1"


# view

## no info (default)
map zn set info

## set info
map zh set hidden!
map zl set relativenumber!
map zs set info size
map zt set info time
map za set info size:time
map zc calcdirsize; set info size

## sort
map zr set reverse!
map sn :set sortby natural; set info
map ss :set sortby size; set info size
map st :set sortby time; set info time
map sa :set sortby atime; set info atime
map sc :set sortby ctime; set info ctime
map se :set sortby ext; set info

map <space> :toggle; down


# cmds/functions

cmd on-cd &{{

    # '&' commands run silently in background (which is what we want here),
    # but are not connected to stdout.
    # To make sure our escape sequence still reaches stdout we pipe it to /dev/tty
    #printf "\033]0; $PWD\007" > /dev/tty
    printf "\033]0; $(pwd | sed "s|$HOME|~|") - lf\007" > /dev/tty
}}

# also run at startup
on-cd


cmd preview_toggle %{{

  if [ "$lf_preview" = "true" ]; then

    lf -remote "send $id :set preview!; set ratios 1:5"

  else

    lf -remote "send $id :set preview!; set ratios 1:2:3"

  fi
}}

map zp preview_toggle


## make directory
cmd mkdir ${{

    IFS=" "
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
}}

map -ad push :mkdir<space>


## make file
cmd mkfile ${{

    IFS=" "
    touch -- "$*"
    lf -remote "send $id select \"$*\""
}}

map -af push :mkfile<space>


## '-gg' go on top of the roof
cmd gohome ${{

    lf -remote "send $id cd $HOME"
}}

map -g gohome


## copy item name to clipboard
cmd copy_clipboard ${{

    if type wl-copy > /dev/null 2>&1; then

	printf '%s' "$f" | wl-copy

    elif type pbcopy > /dev/null 2>&1; then

	printf '%s' "$f" | pbcopy

    elif type xsel > /dev/null 2>&1; then

	printf '%s' "$f" | xsel -ib

    fi
}}

map -cc :copy_clipboard


cmd select_files &{{

    get_files() {

	if [ "$lf_hidden" = 'false' ]; then

	    find "$PWD" -mindepth 1 -maxdepth 1 -type f -not -name '.*' -print0

	else

	    find "$PWD" -mindepth 1 -maxdepth 1 -type f -print0

	fi |

	    xargs -0 printf ' %q'
    }

    lf -remote "send $id :unselect; toggle $(get_files)"
}}

map -sf select_files


cmd select_dirs &{{

    get_dirs() {

	if [ "$lf_hidden" = 'false' ]; then

	    find "$PWD" -mindepth 1 -maxdepth 1 -type d -not -name '.*' -print0

	else

	    find "$PWD" -mindepth 1 -maxdepth 1 -type d -print0

	fi |

	    xargs -0 printf ' %q'
    }

    lf -remote "send $id :unselect; toggle $(get_dirs)"
}}

map -sd select_dirs


# (un)select all items
map -sa glob-select *
map -s0 glob-unselect *


## delete item
## WARNING! does not use rm alias, therefore no trash
cmd delete ${{

    rm -rf -- $fx
}}

map -dd delete


cmd paste %{{

    load=$(cat ~/.local/share/lf/files)
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')

    if [ $mode = 'copy' ]; then

	cp -R $list .

    elif [ $mode = 'move' ]; then

        mv $list .
        rm ~/.local/share/lf/files
        lf -remote 'send clear'

    fi
}}

map -x cut
map -y copy
map -l clear
map -p paste


# bindings
map <c-f> $lf -remote "send $id select \"$(fzf)\""
map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"
map g top
map E extract
map <c-r> reload
map <enter> shell
map x $$f
map X !$f
map o &mimeopen "$f"
map O $mimeopen --ask "$f"

# renaming files
map r
map i rename
map I :rename; cmd-home
map A :rename; cmd-end
#map c :rename; cmd-delete-home
#map C :rename; cmd-end; cmd-delete-home

map b $setbg $f

map V push :!nvim<space>

map W $setsid -f $TERMINAL >/dev/null 2>&1


## opening files
cmd open ${{

    case $(file --mime-type "$(readlink -f $f)" -b) in

	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)
		localc $fx
		;;

	image/vnd.djvu|application/pdf|application/octet-stream|application/postscript)
		setsid -f zathura $fx >/dev/null 2>&1
		;;

        text/*|application/json|inode/x-empty|application/x-subrip)
		$EDITOR $fx
		;;

	image/x-xcf)
		setsid -f gimp $f >/dev/null 2>&1
		;;

	image/svg+xml)
		display -- $f
		;;

	#image/*)
	#    #DEV TODO imv
	#	rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" | \
	#	setsid -f sxiv -aio 2>/dev/null | \

	#	while read -r file; do

	#		[ -z "$file" ] && continue
	#		lf -remote "send select \"$file\""
	#		lf -remote "send toggle"

	#	done &
	#	;;

	audio/*|video/x-ms-asf)
		printf '\n%s\n' "$(basename $f)"
		mpv --audio-display=no $f
		;;

	video/*)
		setsid -f mpv $f -quiet >/dev/null 2>&1
		;;

	application/pdf|application/vnd.djvu|application/epub*)
		setsid -f zathura $fx >/dev/null 2>&1
		;;

	application/pgp-encrypted)
		$EDITOR $fx
		;;

	application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text)
		setsid -f lowriter $fx >/dev/null 2>&1
		;;

	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template)
		setsid -f localc $fx >/dev/null 2>&1
		;;

	application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint)
		setsid -f loimpress $fx >/dev/null 2>&1
		;;

	application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template)
		setsid -f lodraw $fx >/dev/null 2>&1
		;;

	application/vnd.oasis.opendocument.formula)
		setsid -f lomath $fx >/dev/null 2>&1
		;;

	application/vnd.oasis.opendocument.database)
		setsid -f lobase $fx >/dev/null 2>&1
		;;

        *)
		for f in $fx; do

		    setsid -f $OPENER $f >/dev/null 2>&1

		done
		;;

    esac
}}
